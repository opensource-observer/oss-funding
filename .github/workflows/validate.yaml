name: Validate CSV Project Names

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - "data/**/*.csv"

jobs:
  validate_csv:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install dependencies
        run: uv sync

      - name: Find modified CSV files
        id: find_csv
        shell: bash
        run: |
          # get newline-separated list of changed CSVs
          CSV_FILES=$(git diff --name-only origin/${{ github.base_ref }} | grep '\.csv$' || true)
          echo "Modified CSV files:"
          echo "$CSV_FILES"

          if [[ -n "$CSV_FILES" ]]; then
            # convert newlines → spaces for easy for-loop splitting
            CSV_SPACE=$(echo "$CSV_FILES" | tr '\n' ' ')
            echo "csv_files=$CSV_SPACE" >> $GITHUB_OUTPUT
            echo "csv_found=true"   >> $GITHUB_OUTPUT
          else
            echo "csv_found=false"  >> $GITHUB_OUTPUT
          fi

      - name: Validate project names in CSV files
        if: steps.find_csv.outputs.csv_found == 'true'
        id: validate
        shell: bash
        run: |
          echo "# 🔍 CSV Validation Results" > validation_results.md

          INVALID_FOUND=false
          TOTAL_FILES=0
          FAILED_FILES=0

          for file in ${{ steps.find_csv.outputs.csv_files }}; do
            (( TOTAL_FILES++ ))
            echo "----"
            echo "🌱 Validating $file"

            # run the script and capture all output
            OUTPUT=$(uv run src/validate_csv.py "$file" 2>&1)
            echo "$OUTPUT"

            # pull out the invalid count
            INVALID_COUNT=$(echo "$OUTPUT" | grep "Invalid projects:" | sed 's/Invalid projects: //')

            if [[ "$INVALID_COUNT" -gt 0 ]]; then
              INVALID_FOUND=true
              (( FAILED_FILES++ ))

              echo "## ❌ [$file]($file) FAILED"        >> validation_results.md
              echo ''                                >> validation_results.md
              echo '```bash'                         >> validation_results.md
              echo "$OUTPUT"                         >> validation_results.md
              echo '```'                             >> validation_results.md
              echo ''                                >> validation_results.md
            fi
          done

          if [[ "$INVALID_FOUND" == false ]]; then
            echo "## ✅ All CSV Files Passed Validation" >> validation_results.md
          else
            echo "## ❌ Summary: $FAILED_FILES of $TOTAL_FILES files failed validation" >> validation_results.md
          fi

          # export for the next step
          echo "invalid_found=$INVALID_FOUND" >> $GITHUB_OUTPUT

      - name: Comment on PR with validation results
        if: steps.find_csv.outputs.csv_found == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('validation_results.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner:       context.repo.owner,
              repo:        context.repo.repo,
              body,
            });

      - name: Fail workflow if invalid projects found
        if: steps.validate.outputs.invalid_found == 'true'
        run: |
          echo "::error::Invalid project names found. See PR comment for details."
          exit 1
